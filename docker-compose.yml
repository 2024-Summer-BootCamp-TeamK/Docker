version: '3'
services:
    django:
        build:
            context: ./Backend/myproject
        container_name: django
        command: >
          sh -c "python manage.py makemigrations &&
                python manage.py migrate &&
                python manage.py collectstatic --noinput &&
                daphne -b 0.0.0.0 -p 8000 myproject.asgi:application"
        ports:
            - "8000:8000"
        restart: always
        depends_on:
            - mysqldb
        env_file:
            - .env
        volumes:
            - './Backend/myproject:/backend'
        networks:
            - app-tier

    mysqldb:
        image: mysql:latest
        env_file:
            - .env
        ports:
            - '3306:3306'
        volumes:
            - 'mysqldata:/var/lib/mysql'
        networks:
            - app-tier

    redis:
      image: "redis:alpine"
      ports:
        - "6379:6379"
      networks:
        - app-tier

    rabbitmq:
      image: "rabbitmq:3-management"
      container_name: rabbitmq
      env_file:
        - .env
      ports:
        - "5672:5672"
        - "15672:15672"
      volumes:
        - rabbitmq_data:/var/lib/rabbitmq
      networks:
        - app-tier

    celery:
      build: ./Backend/myproject
      container_name: celery_worker
      command: celery -A myproject worker --loglevel=info --pool=prefork
      env_file:
        - .env
      depends_on:
        - rabbitmq
        - redis
        - mysqldb
      volumes:
        - './Backend/myproject:/backend'
      networks:
        - app-tier

    celery_beat:
      build: ./Backend/myproject
      container_name: celery_beat
      command: celery -A myproject beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
      env_file:
        - .env
      depends_on:
        - rabbitmq
        - redis
        - mysqldb
      volumes:
        - './Backend/myproject:/backend'
      networks:
        - app-tier

    react:
      build:
        context: ./Frontend
      restart: always
      command: >
        sh -c "npm install &&
              npm run dev"
      container_name: front
      stdin_open: true
      ports:
        - "5173:5173"
      volumes:
        - ./Frontend:/app/frontend
      networks:
        - app-tier


    nginx:
      build:
        context: ./nginx
      ports:
        - "80:80"  # NGINX가 80 포트에서 호스트의 80 포트로 연결
        - "443:443"
      volumes:
        - ./Backend/myproject/static:/static  # 정적 파일 경로 수정
        - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # 사용자 정의 NGINX 설정 파일을 마운트
        - ./html:/usr/share/nginx/html:ro  # 필요한 경우 정적 파일들을 마운트
        - ./certbot/conf:/etc/letsencrypt
        - ./certbot/www:/var/www/certbot
      depends_on:
        - django
        - react
      command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
      networks:
        - app-tier

    certbot:
      image: certbot/certbot
      restart: unless-stopped
      container_name: certbot
      volumes:
        - ./certbot/conf:/etc/letsencrypt
        - ./certbot/www:/var/www/certbot
      depends_on:
        - nginx
      entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"



volumes:
    mysqldata:
    rabbitmq_data:

networks:
    app-tier:
        driver: bridge
# test
